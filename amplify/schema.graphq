type CourseTemplate @model {
  id: ID! @primaryKey(sortKeyFields: ["version"])
  version: String!
  title: String!
  description: String
  category: String
  learningObjectives: [String]
  contentReference: String
  lastUpdated: AWSDateTime
}

type CourseSession @model {
  id: ID! @primaryKey
  templateId: String!
  instructorId: String! @index(name: "byInstructor", sortKeyFields: ["startDate"])
  title: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  location: String
  maxParticipants: Int
  currentParticipants: Int
  status: SessionStatus!
}

type SessionAssessment @model {
  sessionId: ID! @primaryKey(sortKeyFields: ["assessmentType"])
  assessmentType: String!
  isActive: Boolean!
  settings: AWSJSON
  activatedAt: AWSDateTime
  deactivatedAt: AWSDateTime
}

type Question @model {
  id: ID! @primaryKey
  sessionId: String! @index(name: "bySession", sortKeyFields: ["questionType"])
  questionType: String!
  content: String!
  options: [String]
  correctAnswer: AWSJSON
  difficulty: String
  explanation: String
  autoGenerated: Boolean
  createdBy: String
  createdAt: AWSDateTime
}

type Response @model {
  id: ID! @primaryKey
  sessionId: String! @index(name: "bySession", sortKeyFields: ["studentName"])
  questionId: String! @index(name: "byQuestion")
  studentName: String!
  answer: AWSJSON
  isCorrect: Boolean
  submittedAt: AWSDateTime
}

type Announcement @model {
  id: ID! @primaryKey
  sessionId: String! @index(name: "bySession", sortKeyFields: ["createdAt"])
  title: String!
  content: String!
  importance: AnnouncementImportance!
  assessmentType: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum SessionStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELED
}

enum AnnouncementImportance {
  LOW
  NORMAL
  HIGH
}

type Query {
  generateQuestions(input: GenerateQuestionsInput!): GenerateQuestionsResult @function(name: "TnC-QuestionGenerator")
  getAnalytics(sessionId: String!): AnalyticsResult @function(name: "TnC-Analytics")
}

input GenerateQuestionsInput {
  sessionId: String!
  templateId: String!
  preQuizCount: Int
  postQuizCount: Int
  difficultySplit: AWSJSON
}

type GenerateQuestionsResult {
  sessionId: String!
  preQuizCount: Int
  postQuizCount: Int
  totalGenerated: Int
  status: String
}

type AnalyticsResult {
  sessionId: String!
  totalParticipants: Int
  preQuizStats: AWSJSON
  postQuizStats: AWSJSON
  improvementStats: AWSJSON
  questionDifficultyAnalysis: AWSJSON
}