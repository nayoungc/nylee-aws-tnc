type CourseTemplate {
  id: ID!
  version: String!
  title: String!
  description: String
  category: String
  learningObjectives: [String]
  contentReference: String
  lastUpdated: AWSDateTime
}

type CourseSession {
  id: ID!
  templateId: String!
  instructorId: String!
  title: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  location: String
  maxParticipants: Int
  currentParticipants: Int
  status: SessionStatus!
}

type SessionAssessment {
  sessionId: ID!
  assessmentType: String!
  isActive: Boolean!
  settings: AWSJSON
  activatedAt: AWSDateTime
  deactivatedAt: AWSDateTime
}

type Question {
  id: ID!
  sessionId: String!
  questionType: String!
  content: String!
  options: [String]
  correctAnswer: AWSJSON
  difficulty: String
  explanation: String
  autoGenerated: Boolean
  createdBy: String
  createdAt: AWSDateTime
}

type Response {
  id: ID!
  sessionId: String!
  questionId: String!
  studentName: String!
  answer: AWSJSON
  isCorrect: Boolean
  submittedAt: AWSDateTime
}

type Announcement {
  id: ID!
  sessionId: String!
  title: String!
  content: String!
  importance: AnnouncementImportance!
  assessmentType: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

enum SessionStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELED
}

enum AnnouncementImportance {
  LOW
  NORMAL
  HIGH
}

# 쿼리와 뮤테이션은 실제 API 요구 사항에 따라 확장
type Query {
  getCourseTemplate(id: ID!, version: String): CourseTemplate
  listCourseTemplates(limit: Int, nextToken: String): CourseTemplateConnection
  getCourseSession(id: ID!): CourseSession
  listCourseSessions(instructorId: String, limit: Int, nextToken: String): CourseSessionConnection
  getSessionAssessment(sessionId: ID!, assessmentType: String!): SessionAssessment
  listQuestions(sessionId: String!, questionType: String, limit: Int, nextToken: String): QuestionConnection
  listResponses(sessionId: String!, studentName: String, limit: Int, nextToken: String): ResponseConnection
  listAnnouncements(sessionId: String!, limit: Int, nextToken: String): AnnouncementConnection
  getAnalytics(sessionId: String!): AnalyticsResult
}

type Mutation {
  createCourseTemplate(input: CreateCourseTemplateInput!): CourseTemplate
  updateCourseTemplate(input: UpdateCourseTemplateInput!): CourseTemplate
  createCourseSession(input: CreateCourseSessionInput!): CourseSession
  updateCourseSession(input: UpdateCourseSessionInput!): CourseSession
  updateSessionAssessment(input: UpdateSessionAssessmentInput!): SessionAssessment
  generateQuestions(input: GenerateQuestionsInput!): GenerateQuestionsResult
  createQuestion(input: CreateQuestionInput!): Question
  updateQuestion(input: UpdateQuestionInput!): Question
  submitResponse(input: SubmitResponseInput!): Response
  createAnnouncement(input: CreateAnnouncementInput!): Announcement
  updateAnnouncement(input: UpdateAnnouncementInput!): Announcement
  deleteAnnouncement(id: ID!): DeleteAnnouncementResult
}

type Subscription {
  onUpdateSessionAssessment(sessionId: String!): SessionAssessment
    @aws_subscribe(mutations: ["updateSessionAssessment"])
  onCreateAnnouncement(sessionId: String!): Announcement
    @aws_subscribe(mutations: ["createAnnouncement"])
  onUpdateAnnouncement(sessionId: String!): Announcement
    @aws_subscribe(mutations: ["updateAnnouncement"])
}

# 연결 타입과 입력 타입은 생략 (실제 구현시 필요)
type CourseTemplateConnection {
  items: [CourseTemplate]
  nextToken: String
}

type CourseSessionConnection {
  items: [CourseSession]
  nextToken: String
}

type QuestionConnection {
  items: [Question]
  nextToken: String
}

type ResponseConnection {
  items: [Response]
  nextToken: String
}

type AnnouncementConnection {
  items: [Announcement]
  nextToken: String
}

type AnalyticsResult {
  sessionId: String!
  totalParticipants: Int
  preQuizStats: AWSJSON
  postQuizStats: AWSJSON
  improvementStats: AWSJSON
  questionDifficultyAnalysis: AWSJSON
}

type GenerateQuestionsResult {
  sessionId: String!
  preQuizCount: Int
  postQuizCount: Int
  totalGenerated: Int
  status: String
}

type DeleteAnnouncementResult {
  id: ID!
  success: Boolean!
}

# 입력 타입은 생략 (실제 구현시 필요)
input CreateCourseTemplateInput {
  id: ID
  version: String
  title: String!
  description: String
  category: String
  learningObjectives: [String]
  contentReference: String
}

input UpdateCourseTemplateInput {
  id: ID!
  version: String!
  title: String
  description: String
  category: String
  learningObjectives: [String]
  contentReference: String
}

input CreateCourseSessionInput {
  templateId: String!
  title: String!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  location: String
  maxParticipants: Int
}

input UpdateCourseSessionInput {
  id: ID!
  title: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  location: String
  maxParticipants: Int
  status: SessionStatus
}

input UpdateSessionAssessmentInput {
  sessionId: ID!
  assessmentType: String!
  isActive: Boolean!
  settings: AWSJSON
}

input GenerateQuestionsInput {
  sessionId: String!
  templateId: String!
  preQuizCount: Int
  postQuizCount: Int
  difficultySplit: AWSJSON
}

input CreateQuestionInput {
  sessionId: String!
  questionType: String!
  content: String!
  options: [String]
  correctAnswer: AWSJSON
  difficulty: String
  explanation: String
  autoGenerated: Boolean
}

input UpdateQuestionInput {
  id: ID!
  content: String
  options: [String]
  correctAnswer: AWSJSON
  difficulty: String
  explanation: String
}

input SubmitResponseInput {
  sessionId: String!
  questionId: String!
  studentName: String!
  answer: AWSJSON!
}

input CreateAnnouncementInput {
  sessionId: String!
  title: String!
  content: String!
  importance: AnnouncementImportance
  assessmentType: String
}

input UpdateAnnouncementInput {
  id: ID!
  title: String
  content: String
  importance: AnnouncementImportance
}